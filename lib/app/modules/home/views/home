RefreshIndicator(
            onRefresh: () => Future.sync(
              () => controller.fetchDataFotoWedding(true),
            ),
            child: controller.isloadingFoto.value && controller.currentPage == 1
                ? Center(
                    child: CircularProgressIndicator(),
                  )
                : fotoController.success == false
                    ? Center(child: Text('404'))
                    : 
                    
                    NotificationListener<ScrollNotification>(
                        onNotification: (ScrollNotification scrollInfo) {
                          if (!controller.isloadingFoto.value &&
                              scrollInfo.metrics.pixels ==
                                  scrollInfo.metrics.maxScrollExtent) {
                            if (fotoController.media?.results?.length != null &&
                                fotoController.media!.results!.length % 20 ==
                                    0) {
                              controller.currentPage++;
                              controller.fetchDataFotoWedding(false,
                                  page: controller.currentPage);
                            }
                          }
                          return true;
                        },
                        child: MasonryGridView.builder(
                          shrinkWrap: true,
                          itemCount: fotoController.media?.results?.length ?? 0,
                          gridDelegate:
                              SliverSimpleGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: 2,
                          ),
                          itemBuilder: (context, index) {
                            var data = fotoController.media?.results?[index];
                            if (data == null) return SizedBox.shrink();
                            return Padding(
                              padding: EdgeInsets.all(
                                  getActualY(y: 5, context: context)),
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(
                                    getActualY(y: 12, context: context)),
                                child: GestureDetector(
                                  onTap: () {
                                    // Navigasi ke halaman full screen
                                    Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (context) =>
                                            FullScreenPhotoView(
                                          imageUrls: fotoController
                                              .media!.results!
                                              .map((e) => e.mediaUrl!)
                                              .toList(),
                                          initialIndex: index,
                                        ),
                                      ),
                                    );
                                  },
                                  child: imageNetwork(data.thumbMediaUrl!),
                                ),
                              ),
                            );
                          },
                        ),
                      ),
          ),

class FullScreenPhotoView extends StatelessWidget {
  final List<String> imageUrls;
  final int initialIndex;

  FullScreenPhotoView({required this.imageUrls, required this.initialIndex});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: PhotoViewGallery.builder(
        itemCount: imageUrls.length,
        builder: (context, index) {
          return PhotoViewGalleryPageOptions(
            imageProvider: NetworkImage(imageUrls[index]),
            minScale: PhotoViewComputedScale.contained,
            maxScale: PhotoViewComputedScale.covered * 2,
          );
        },
        scrollPhysics: BouncingScrollPhysics(),
        backgroundDecoration: BoxDecoration(color: Colors.black),
        pageController: PageController(initialPage: initialIndex),
      ),
    );
  }
}